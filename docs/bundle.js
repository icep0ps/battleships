(()=>{"use strict";var e={462:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(s(226)),a=r(s(154));t.default=class{constructor(e=10){this.size=e,this.__coordinates__=this.generateCoordinates(),this.__ships__=[new a.default(4),new a.default(3),new a.default(3),new a.default(2),new a.default(2),new a.default(1),new a.default(1),new a.default(1),new a.default(1)]}get ships(){return this.__ships__}get coordinates(){return this.__coordinates__}set coordinates(e){this.__coordinates__=e}set ships(e){this.__ships__=e}get indexOfUnplacedShip(){return this.__ships__.findIndex((e=>0===e.coordinates.length))}allShipsArePlaced(){return this.__ships__.every((e=>e.coordinates.length===e.size))}placeShip(e){if(void 0===this.indexOfUnplacedShip)throw new Error("Failed to place ship: All board ships have been placed");this.__ships__[this.indexOfUnplacedShip].coordinates=e.map((e=>new i.default(e)))}receiveAttack(e){let t=null;return this.__ships__.forEach((s=>{const r=s.coordinates.filter((t=>t.value===e))[0];r&&(r.hit=!0,t=s)})),t}allShipsAreDestroyed(){return this.__ships__.every((e=>e.isDestroyed()))}generateCoordinates(){const e=[];for(let t=0;t<this.size;t++)for(let s=0;s<this.size;s++)e.push(t.toString()+","+s.toString());return e}}},226:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.value=e,this.hit=!1}}},489:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(s(119));t.default=class{constructor(e){this.gameboards=()=>({player:this.game.controllers.display.createBoard("player",this.game.state.players.player.board.size,"Your board"),enemy:this.game.controllers.display.createBoard("enemy",this.game.state.players.enemy.board.size,"Enemy board")}),this.createBoard=(e,t,s)=>{const r=document.getElementsByTagName("section")[0],i=this.createElement("table",{className:"wrapper",id:"enemy"===e?"enemy-table":"player-table"},r);this.createElement("h1",null,i).innerText=s;const a=this.createElement("tbody",{className:"board",id:e},i);if("enemy"===e){const e=document.getElementById("start-btn");e&&e.addEventListener("click",(()=>this.game.start(a)))}for(let e=0;e<t;e++){const s=document.createElement("tr");for(let r=0;r<t;r++){const t=this.game.controllers.display.createGrids(e.toString()+","+r.toString());s.appendChild(t)}a.append(s)}return a},this.game=e}ship(e,t){t.forEach((t=>{const s=document.getElementById(e);if(!s)return;const r=s.querySelector(`[data-coordinates="${t[0]},${t[2]}"]`);r&&r.classList.add("ship")}))}showGameoverDialog(e){var t;const s=document.querySelector("dialog");null==s||s.showModal();const r=document.querySelector("dialog p");r&&(r.textContent=e),null===(t=document.querySelector("dialog button"))||void 0===t||t.addEventListener("click",(()=>{window.location.reload(),null==s||s.close()}))}changeBoardOpacity(e){const t=document.getElementById("player-table"),s=document.getElementById("enemy-table");s&&t&&("enemy"!==e?(t.style.opacity="0.5",s.style.opacity="1"):(t.style.opacity="1",s.style.opacity="0.5"))}disableButtons(){const e=document.querySelectorAll("button");e&&e.forEach((e=>e.disabled=!0))}attack(e,t,s){const r=document.getElementById(e);if(!r)return;const i=r.querySelector(`[data-coordinates="${t[0]},${t[2]}"]`);i&&(s?(i.setAttribute("class","hit"),i.textContent="✖"):(i.setAttribute("class","miss"),i.textContent="•",this.changeBoardOpacity(e)),i.classList.remove("grid"))}isValidPlacement(e){const t=this.game.state.players.player.board;return e.length===t.ships[t.indexOfUnplacedShip].size}markDestroyedShipsCoordinates(e,t){t.forEach((t=>{(0,i.default)(t).forEach((t=>{const s=e.querySelector(`[data-coordinates="${t[0]},${t[2]}"]`);if(s){if(s.style.pointerEvents="none",s.classList.contains("hit"))return;s.classList.add("surrounding-destroyed"),s.innerText="•"}}))}))}getPlayerBoard(e){const t=document.getElementById(e);if(!t)throw new Error("Could not find board with ID: "+e);return t}createGrids(e){const t=document.createElement("td");return t.dataset.coordinates=e,t}getShipGrids(e,t){const s=e.dataset.coordinates,r=[];for(let e=0;e<t.size;e++){const t=s[0],i=Number(s[2]),a=document.querySelector(`[data-coordinates="${t},${i+e}"]`);a&&r.push(a)}return r}createElement(e,t,s){const r=document.createElement(e);return t&&(t.id&&r.setAttribute("id",t.id),t.className&&r.classList.add(t.className)),s&&s.appendChild(r),r}}},432:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(s(756));class a extends i.default{constructor(){super("ENEMY"),this.coordinatesAttacked=[]}generateRandomCoordinates(e=this.board.size-1){let t=Math.floor(Math.random()*e),s=Math.floor(Math.random()*e),r=`${t},${s}`;for(;this.coordinatesAttacked.includes(r);)t=Math.floor(Math.random()*e),s=Math.floor(Math.random()*e),r=`${t},${s}`;return this.coordinatesAttacked.push(r),r}}t.default=a},434:function(e,t){var s=this&&this.__awaiter||function(e,t,s,r){return new(s||(s=Promise))((function(i,a){function o(e){try{l(r.next(e))}catch(e){a(e)}}function n(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(o,n)}l((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.attack=e=>s(this,void 0,void 0,(function*(){if(this.isGameOver()||this.isEnemyTurn())return;const t=e.currentTarget,s=this.getCoordinate(t);if(!s)return;const r=this.state.players.enemy.board.receiveAttack(s);if(this.displayController.attack("enemy",s,r),t.style.pointerEvents="none",null==r?void 0:r.isDestroyed()){const e=this.displayController.getPlayerBoard("enemy");this.displayController.markDestroyedShipsCoordinates(e,r.coordinates.map((e=>e.value)))}this.isEnemyDefeated()?this.endGame("You win"):r||(this.switchCurrentPlayer(),yield this.enemyTurn())})),this.placeShip=e=>{const t=e.currentTarget,s=this.getCoordinatesForShipPlacement(t);s.length&&(this.state.players.player.board.placeShip(s),this.displayController.ship("player",s))},this.addHighlight=e=>{if(this.allShipsPlaced())return;const t=e.currentTarget,s=this.getGridsForHighlighting(t);this.displayController.isValidPlacement(s)&&s.forEach((e=>e.classList.add("highlight")))},this.removeHighlight=e=>{if(this.allShipsPlaced())return;const t=e.currentTarget;this.getGridsForHighlighting(t).forEach((e=>e.classList.remove("highlight")))},this.state=e,this.displayController=t}switchCurrentPlayer(){const{player:e,enemy:t}=this.state.players,s=this.state.current.player.type;this.state.setState("current",{player:"PLAYER"===s?t:e,enemy:"PLAYER"===s?e:t})}enemyTurn(){return s(this,void 0,void 0,(function*(){let e;do{e=yield this.executeEnemyAttack()}while(e)}))}executeEnemyAttack(){return s(this,void 0,void 0,(function*(){return new Promise((e=>{setTimeout((()=>{const t=this.state.players.enemy.generateRandomCoordinates(),s=this.state.players.player.board.receiveAttack(t);if(this.displayController.attack("player",t,s),null==s?void 0:s.isDestroyed()){const e=this.displayController.getPlayerBoard("player");this.displayController.markDestroyedShipsCoordinates(e,s.coordinates.map((e=>e.value)))}null===s&&this.switchCurrentPlayer(),this.state.players.player.board.allShipsAreDestroyed()?(this.endGame("You lose"),e(null)):e(!!s)}),900)}))}))}endGame(e){this.state.setState("status","GAME-OVER"),this.displayController.showGameoverDialog(e)}isGameOver(){return"GAME-OVER"===this.state.status}isEnemyTurn(){return"ENEMY"===this.state.current.player.type}isEnemyDefeated(){return this.state.players.enemy.board.allShipsAreDestroyed()}allShipsPlaced(){return this.state.players.player.board.allShipsArePlaced()}getCoordinate(e){return e.dataset.coordinates||null}getCoordinatesForShipPlacement(e){const t=this.state.players.player.board;return this.displayController.getShipGrids(e,t.ships[t.indexOfUnplacedShip]).map((e=>e.dataset.coordinates||""))}getGridsForHighlighting(e){const t=this.state.players.player;return this.displayController.getShipGrids(e,t.board.ships[t.board.indexOfUnplacedShip])}}},53:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(s(421)),a=r(s(489)),o=r(s(434));t.default=class{constructor(){this.state=new i.default;const e=new a.default(this);this.controllers={display:e,events:new o.default(this.state,e)}}initialize(){const{player:e}=this.controllers.display.gameboards();this.state.players.player.placeShips(),this.state.players.player.board.ships.forEach((e=>{this.controllers.display.ship("player",e.coordinates.map((e=>e.value)))})),this.addEventListenersToGrids(e,"mouseenter",this.controllers.events.addHighlight),this.addEventListenersToGrids(e,"mouseleave",this.controllers.events.removeHighlight),this.addEventListenersToGrids(e,"click",this.controllers.events.placeShip.bind(this.controllers.display),{once:!0})}start(e){this.controllers.display.disableButtons(),this.controllers.display.changeBoardOpacity("player"),this.state.players.player.board.ships.forEach((e=>{this.controllers.display.ship("player",e.coordinates.map((e=>e.value)))})),this.addEventListenersToGrids(e,"click",this.controllers.events.attack,{capture:!0}),this.state.players.enemy.placeShips()}addEventListenersToGrids(e,t,s,r){e.querySelectorAll("td").forEach((e=>{e instanceof HTMLTableCellElement&&e.addEventListener(t,s,r)}))}}},756:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(s(462)),a=r(s(119));t.default=class{constructor(e){this.coordinateSupportsShipSize=(e,t)=>{if(!e)return!1;const s=[];for(let r=0;r<t;r++){const[t,i]=e.split(",").map(Number),a=i+r;s.push(`${t},${a}`)}return s.every((e=>this.board.coordinates.includes(e)))},this.__type__=e,this.board=new i.default}get type(){return this.__type__}placeShips(){this.board.ships.forEach((e=>{const t=this.generateShipCoordinates(e.size);this.board.placeShip(t)}))}generateShipCoordinates(e){const t=[],s=this.board.coordinates.filter(((t,s,r)=>{const[i,a]=t.split(",").map(Number);return a<=this.board.size-e&&this.coordinateSupportsShipSize(t,e)}));if(0===s.length)return window.alert("No valid coordinates available for placing the ship."),console.error("No valid coordinates available for placing the ship.",this.board.ships[this.board.indexOfUnplacedShip]),[];const r=s[Math.floor(Math.random()*s.length)];for(let s=0;s<e;s++){const[e,i]=r.split(",").map(Number),a=`${e},${i+s}`;t.push(a)}const i=[...new Set(t.flatMap((e=>[e,...(0,a.default)(e)])))],o=this.board.coordinates.filter((e=>!i.includes(e)));return this.board.coordinates=o,t}}},154:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.size=e,this.__coordinates__=[]}get coordinates(){return this.__coordinates__}set coordinates(e){const t=new RegExp(/^[0-9],[0-9]$/);e.forEach((s=>{if(!s.value.match(t))throw new Error("Invalid coordinates format, Got: "+e);if(this.__coordinates__.length>this.size)throw new Error(`Too many coordinates ship is size ${this.size} but got more that ${this.size} coordinates`);this.__coordinates__.push(s)}))}isDestroyed(){return this.coordinates.every((e=>e.hit))}}},421:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(s(756)),a=r(s(432));t.default=class{constructor(){this.status="PLAYERS-SETUP",this.current={enemy:new a.default,player:new i.default("PLAYER")},this.players={enemy:new a.default,player:new i.default("PLAYER")}}setState(e,t){this[e]=t}}},519:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),(new(r(s(53)).default)).initialize()},119:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const[t,s]=e.split(",").map(Number);return[`${t},${s-1}`,`${t},${s+1}`,`${t-1},${s}`,`${t+1},${s}`,`${t-1},${s-1}`,`${t+1},${s-1}`,`${t-1},${s+1}`,`${t+1},${s+1}`]}}},t={};!function s(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,s),a.exports}(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENDbkIwQkgsQ0FBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL2NsYXNzZXMvQm9hcmQudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9zcmMvY2xhc3Nlcy9Db29yZGluYXRlLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL2NsYXNzZXMvRGlzcGxheS50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9jbGFzc2VzL0VuZW15LnRzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL2NsYXNzZXMvRXZlbnRzLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL2NsYXNzZXMvR2FtZS50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9jbGFzc2VzL1BsYXllci50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9jbGFzc2VzL1NoaXAudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9zcmMvY2xhc3Nlcy9TdGF0ZS50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9tYWluLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL3V0aWxzL2dldENvb3JkaW5hdGVzU3Vycm91bmRpbmdHcmlkcy50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvb3JkaW5hdGUgZnJvbSAnLi9Db29yZGluYXRlJztcbmltcG9ydCBTaGlwIGZyb20gJy4vU2hpcCc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb2FyZCB7XG4gIHB1YmxpYyBzaXplOiBudW1iZXI7XG4gIHByaXZhdGUgX19zaGlwc19fOiBTaGlwW107XG4gIHByaXZhdGUgX19jb29yZGluYXRlc19fOiBzdHJpbmdbXTtcblxuICBjb25zdHJ1Y3RvcihzaXplOiBudW1iZXIgPSAxMCkge1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgdGhpcy5fX2Nvb3JkaW5hdGVzX18gPSB0aGlzLmdlbmVyYXRlQ29vcmRpbmF0ZXMoKTtcbiAgICB0aGlzLl9fc2hpcHNfXyA9IFtcbiAgICAgIG5ldyBTaGlwKDQpLFxuICAgICAgbmV3IFNoaXAoMyksXG4gICAgICBuZXcgU2hpcCgzKSxcbiAgICAgIG5ldyBTaGlwKDIpLFxuICAgICAgbmV3IFNoaXAoMiksXG4gICAgICBuZXcgU2hpcCgxKSxcbiAgICAgIG5ldyBTaGlwKDEpLFxuICAgICAgbmV3IFNoaXAoMSksXG4gICAgICBuZXcgU2hpcCgxKSxcbiAgICBdO1xuICB9XG5cbiAgZ2V0IHNoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLl9fc2hpcHNfXztcbiAgfVxuXG4gIGdldCBjb29yZGluYXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2Nvb3JkaW5hdGVzX187XG4gIH1cblxuICBzZXQgY29vcmRpbmF0ZXMoY29vcmRpbmF0ZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fX2Nvb3JkaW5hdGVzX18gPSBjb29yZGluYXRlcztcbiAgfVxuXG4gIHNldCBzaGlwcyhzaGlwczogU2hpcFtdKSB7XG4gICAgdGhpcy5fX3NoaXBzX18gPSBzaGlwcztcbiAgfVxuXG4gIGdldCBpbmRleE9mVW5wbGFjZWRTaGlwKCkge1xuICAgIHJldHVybiB0aGlzLl9fc2hpcHNfXy5maW5kSW5kZXgoKHNoaXApID0+IHNoaXAuY29vcmRpbmF0ZXMubGVuZ3RoID09PSAwKTtcbiAgfVxuXG4gIGFsbFNoaXBzQXJlUGxhY2VkKCkge1xuICAgIHJldHVybiB0aGlzLl9fc2hpcHNfXy5ldmVyeShcbiAgICAgIChzaGlwKSA9PiBzaGlwLmNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gc2hpcC5zaXplXG4gICAgKTtcbiAgfVxuXG4gIHBsYWNlU2hpcChjb29yZGluYXRlczogc3RyaW5nW10pIHtcbiAgICBpZiAodGhpcy5pbmRleE9mVW5wbGFjZWRTaGlwID09PSB1bmRlZmluZWQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwbGFjZSBzaGlwOiBBbGwgYm9hcmQgc2hpcHMgaGF2ZSBiZWVuIHBsYWNlZCcpO1xuXG4gICAgdGhpcy5fX3NoaXBzX19bdGhpcy5pbmRleE9mVW5wbGFjZWRTaGlwXS5jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzLm1hcChcbiAgICAgIChjb29yZGluYXRlKSA9PiBuZXcgQ29vcmRpbmF0ZShjb29yZGluYXRlKVxuICAgICk7XG4gIH1cblxuICByZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGVzOiBzdHJpbmcpOiBudWxsIHwgU2hpcCB7XG4gICAgbGV0IHNoaXBIaXQgPSBudWxsO1xuXG4gICAgdGhpcy5fX3NoaXBzX18uZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IHNoaXAuY29vcmRpbmF0ZXMuZmlsdGVyKFxuICAgICAgICAoY29vcmRpbmF0ZSkgPT4gY29vcmRpbmF0ZS52YWx1ZSA9PT0gY29vcmRpbmF0ZXNcbiAgICAgIClbMF07XG5cbiAgICAgIGlmIChjb29yZGluYXRlKSB7XG4gICAgICAgIGNvb3JkaW5hdGUuaGl0ID0gdHJ1ZTtcbiAgICAgICAgc2hpcEhpdCA9IHNoaXA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2hpcEhpdDtcbiAgfVxuXG4gIGFsbFNoaXBzQXJlRGVzdHJveWVkKCkge1xuICAgIHJldHVybiB0aGlzLl9fc2hpcHNfXy5ldmVyeSgoc2hpcCkgPT4gc2hpcC5pc0Rlc3Ryb3llZCgpKTtcbiAgfVxuXG4gIGdlbmVyYXRlQ29vcmRpbmF0ZXMoKSB7XG4gICAgY29uc3QgY29vcmRpbmF0ZXM6IHN0cmluZ1tdID0gW107XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLnNpemU7IHgrKykge1xuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLnNpemU7IHkrKykge1xuICAgICAgICBjb29yZGluYXRlcy5wdXNoKHgudG9TdHJpbmcoKSArICcsJyArIHkudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzO1xuICB9XG59XG4iLCJjbGFzcyBDb29yZGluYXRlIHtcbiAgdmFsdWU6IHN0cmluZztcbiAgaGl0OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5oaXQgPSBmYWxzZTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ29vcmRpbmF0ZTtcbiIsImltcG9ydCBTaGlwIGZyb20gJy4vU2hpcCc7XG5pbXBvcnQgR2FtZSBmcm9tICcuL0dhbWUnO1xuaW1wb3J0IGdldENvb3JkaW5hdGVzU3Vycm91bmRpbmdHcmlkcyBmcm9tICcuLi91dGlscy9nZXRDb29yZGluYXRlc1N1cnJvdW5kaW5nR3JpZHMnO1xuaW1wb3J0IFBsYXllciBmcm9tICcuL1BsYXllcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpc3BsYXkge1xuICBnYW1lOiBHYW1lO1xuXG4gIGNvbnN0cnVjdG9yKGdhbWU6IEdhbWUpIHtcbiAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICB9XG5cbiAgc2hpcChib2FyZGlkOiBzdHJpbmcsIGNvb3JkaW5hdGVzOiBzdHJpbmdbXSkge1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2goKGNvb3JkaW5hdGUpID0+IHtcbiAgICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYm9hcmRpZCk7XG5cbiAgICAgIGlmICghYm9hcmQpIHJldHVybjtcblxuICAgICAgY29uc3QgZ3JpZCA9IGJvYXJkLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIGBbZGF0YS1jb29yZGluYXRlcz1cIiR7Y29vcmRpbmF0ZVswXX0sJHtjb29yZGluYXRlWzJdfVwiXWBcbiAgICAgICk7XG4gICAgICBpZiAoZ3JpZCkge1xuICAgICAgICBncmlkLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNob3dHYW1lb3ZlckRpYWxvZyhtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkaWFsb2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaWFsb2cnKTtcbiAgICBkaWFsb2c/LnNob3dNb2RhbCgpO1xuXG4gICAgY29uc3QgcGFyYWdyYXBoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGlhbG9nIHAnKTtcbiAgICBpZiAocGFyYWdyYXBoKSBwYXJhZ3JhcGgudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGlhbG9nIGJ1dHRvbicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgIGRpYWxvZz8uY2xvc2UoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdhbWVib2FyZHMgPSAoKSA9PiB7XG4gICAgY29uc3QgcGxheWVyYm9hcmQgPSB0aGlzLmdhbWUuY29udHJvbGxlcnMuZGlzcGxheS5jcmVhdGVCb2FyZChcbiAgICAgICdwbGF5ZXInLFxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnBsYXllcnMucGxheWVyLmJvYXJkLnNpemUsXG4gICAgICAnWW91ciBib2FyZCdcbiAgICApO1xuICAgIGNvbnN0IGVuZW15Ym9hcmQgPSB0aGlzLmdhbWUuY29udHJvbGxlcnMuZGlzcGxheS5jcmVhdGVCb2FyZChcbiAgICAgICdlbmVteScsXG4gICAgICB0aGlzLmdhbWUuc3RhdGUucGxheWVycy5lbmVteS5ib2FyZC5zaXplLFxuICAgICAgJ0VuZW15IGJvYXJkJ1xuICAgICk7XG5cbiAgICByZXR1cm4geyBwbGF5ZXI6IHBsYXllcmJvYXJkLCBlbmVteTogZW5lbXlib2FyZCB9O1xuICB9O1xuXG4gIGNoYW5nZUJvYXJkT3BhY2l0eShjdXJyZW50RW5lbXk6IHN0cmluZykge1xuICAgIGNvbnN0IHBsYXllclRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllci10YWJsZScpO1xuICAgIGNvbnN0IGVuZW15VGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW5lbXktdGFibGUnKTtcbiAgICBpZiAoZW5lbXlUYWJsZSAmJiBwbGF5ZXJUYWJsZSkge1xuICAgICAgaWYgKGN1cnJlbnRFbmVteSAhPT0gJ2VuZW15Jykge1xuICAgICAgICBwbGF5ZXJUYWJsZS5zdHlsZS5vcGFjaXR5ID0gJzAuNSc7XG4gICAgICAgIGVuZW15VGFibGUuc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllclRhYmxlLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgICAgIGVuZW15VGFibGUuc3R5bGUub3BhY2l0eSA9ICcwLjUnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRpc2FibGVCdXR0b25zKCkge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKTtcbiAgICBpZiAoYnV0dG9ucykgYnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IChidXR0b24uZGlzYWJsZWQgPSB0cnVlKSk7XG4gIH1cblxuICBhdHRhY2soZW5lbXk6IHN0cmluZywgY29vcmRpbmF0ZTogc3RyaW5nLCBzaGlwSGl0OiBTaGlwIHwgbnVsbCkge1xuICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZW5lbXkpO1xuICAgIGlmICghYm9hcmQpIHJldHVybjtcblxuICAgIGNvbnN0IGdyaWQgPSBib2FyZC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYFtkYXRhLWNvb3JkaW5hdGVzPVwiJHtjb29yZGluYXRlWzBdfSwke2Nvb3JkaW5hdGVbMl19XCJdYFxuICAgICk7XG5cbiAgICBpZiAoZ3JpZCkge1xuICAgICAgaWYgKHNoaXBIaXQpIHtcbiAgICAgICAgZ3JpZC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2hpdCcpO1xuICAgICAgICBncmlkLnRleHRDb250ZW50ID0gJ+Kclic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBncmlkLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWlzcycpO1xuICAgICAgICBncmlkLnRleHRDb250ZW50ID0gJ+KAoic7XG4gICAgICAgIHRoaXMuY2hhbmdlQm9hcmRPcGFjaXR5KGVuZW15KTtcbiAgICAgIH1cbiAgICAgIGdyaWQuY2xhc3NMaXN0LnJlbW92ZSgnZ3JpZCcpO1xuICAgIH1cbiAgfVxuXG4gIGlzVmFsaWRQbGFjZW1lbnQoZ3JpZHM6IEhUTUxUYWJsZUNlbGxFbGVtZW50W10pIHtcbiAgICBjb25zdCBib2FyZCA9IHRoaXMuZ2FtZS5zdGF0ZS5wbGF5ZXJzLnBsYXllci5ib2FyZDtcbiAgICByZXR1cm4gZ3JpZHMubGVuZ3RoID09PSBib2FyZC5zaGlwc1tib2FyZC5pbmRleE9mVW5wbGFjZWRTaGlwXS5zaXplO1xuICB9XG5cbiAgbWFya0Rlc3Ryb3llZFNoaXBzQ29vcmRpbmF0ZXMoYm9hcmQ6IEhUTUxFbGVtZW50LCBjb29yZGluYXRlczogc3RyaW5nW10pIHtcbiAgICBjb29yZGluYXRlcy5mb3JFYWNoKChjb29yZGluYXRlKSA9PiB7XG4gICAgICBnZXRDb29yZGluYXRlc1N1cnJvdW5kaW5nR3JpZHMoY29vcmRpbmF0ZSkuZm9yRWFjaCgoY29vcmRpbmF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBib2FyZENvb3JkaW5hdGUgPSBib2FyZC5xdWVyeVNlbGVjdG9yPEhUTUxUYWJsZUNlbGxFbGVtZW50PihcbiAgICAgICAgICBgW2RhdGEtY29vcmRpbmF0ZXM9XCIke2Nvb3JkaW5hdGVbMF19LCR7Y29vcmRpbmF0ZVsyXX1cIl1gXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGJvYXJkQ29vcmRpbmF0ZSkge1xuICAgICAgICAgIGJvYXJkQ29vcmRpbmF0ZS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgICAgICAgIGlmIChib2FyZENvb3JkaW5hdGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaXQnKSkgcmV0dXJuO1xuICAgICAgICAgIGJvYXJkQ29vcmRpbmF0ZS5jbGFzc0xpc3QuYWRkKCdzdXJyb3VuZGluZy1kZXN0cm95ZWQnKTtcbiAgICAgICAgICBib2FyZENvb3JkaW5hdGUuaW5uZXJUZXh0ID0gJ+KAoic7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0UGxheWVyQm9hcmQoYm9hcmRpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChib2FyZGlkKTtcbiAgICBpZiAoIWJvYXJkKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGJvYXJkIHdpdGggSUQ6ICcgKyBib2FyZGlkKTtcbiAgICByZXR1cm4gYm9hcmQ7XG4gIH1cblxuICBjcmVhdGVCb2FyZCA9IChpZDogc3RyaW5nLCBzaXplOiBudW1iZXIsIGJvYXJkVGl0bGU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGxldHRlcnMgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0knLCAnSiddO1xuXG4gICAgY29uc3QgbWFpbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzZWN0aW9uJylbMF07XG5cbiAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3RhYmxlJyxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnd3JhcHBlcicsXG4gICAgICAgIGlkOiBpZCA9PT0gJ2VuZW15JyA/ICdlbmVteS10YWJsZScgOiAncGxheWVyLXRhYmxlJyxcbiAgICAgIH0sXG4gICAgICBtYWluXG4gICAgKTtcblxuICAgIGNvbnN0IHBsYXllciA9IHRoaXMuY3JlYXRlRWxlbWVudCgnaDEnLCBudWxsLCB3cmFwcGVyKTtcbiAgICBwbGF5ZXIuaW5uZXJUZXh0ID0gYm9hcmRUaXRsZTtcblxuICAgIGNvbnN0IGJvYXJkID0gdGhpcy5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3Rib2R5JyxcbiAgICAgIHsgY2xhc3NOYW1lOiAnYm9hcmQnLCBpZCB9LFxuICAgICAgd3JhcHBlclxuICAgICk7XG5cbiAgICBpZiAoaWQgPT09ICdlbmVteScpIHtcbiAgICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0LWJ0bicpO1xuICAgICAgaWYgKHN0YXJ0QnV0dG9uKVxuICAgICAgICBzdGFydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuZ2FtZS5zdGFydChib2FyZCkpO1xuICAgIH1cblxuICAgIC8vY2hhbmdlIHRoaXMgc28gdGhhdCBpdCB1c2VzIHRoZSBncmlkcyBpbiB0aGUgYm9hcmQgY2xhc3MgdG8gY3JlYXRlIGRvbSBncmlkc1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgc2l6ZTsgeCsrKSB7XG4gICAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBzaXplOyB5KyspIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMuZ2FtZS5jb250cm9sbGVycy5kaXNwbGF5LmNyZWF0ZUdyaWRzKFxuICAgICAgICAgIHgudG9TdHJpbmcoKSArICcsJyArIHkudG9TdHJpbmcoKVxuICAgICAgICApO1xuICAgICAgICByb3cuYXBwZW5kQ2hpbGQoZ3JpZCk7XG4gICAgICB9XG4gICAgICBib2FyZC5hcHBlbmQocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYm9hcmQ7XG4gIH07XG5cbiAgY3JlYXRlR3JpZHMoY29vcmRpbmF0ZXM6IHN0cmluZykge1xuICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIGdyaWQuZGF0YXNldC5jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzO1xuICAgIHJldHVybiBncmlkO1xuICB9XG5cbiAgZ2V0U2hpcEdyaWRzKGdyaWQ6IEhUTUxUYWJsZUNlbGxFbGVtZW50LCBzaGlwOiBTaGlwKSB7XG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSBncmlkLmRhdGFzZXQuY29vcmRpbmF0ZXMgYXMgc3RyaW5nO1xuICAgIGNvbnN0IGdyaWRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLnNpemU7IGkrKykge1xuICAgICAgY29uc3QgeGF4aXMgPSBjb29yZGluYXRlc1swXTtcbiAgICAgIGNvbnN0IHlheGlzID0gTnVtYmVyKGNvb3JkaW5hdGVzWzJdKTtcblxuICAgICAgY29uc3QgZ3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIGBbZGF0YS1jb29yZGluYXRlcz1cIiR7eGF4aXN9LCR7eWF4aXMgKyBpfVwiXWBcbiAgICAgICk7XG4gICAgICBpZiAoZ3JpZCkgZ3JpZHMucHVzaChncmlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JpZHMgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnRbXTtcbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQoXG4gICAgdGFnTmFtZToga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICAgIGlkPzogc3RyaW5nO1xuICAgIH0gfCBudWxsLFxuICAgIHBhcmVudD86IEhUTUxFbGVtZW50XG4gICkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5pZCkgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgb3B0aW9ucy5pZCk7XG4gICAgICBpZiAob3B0aW9ucy5jbGFzc05hbWUpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChvcHRpb25zLmNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG59XG4iLCJpbXBvcnQgRGlzcGxheUNvbnRyb2xsZXIgZnJvbSAnLi9EaXNwbGF5JztcbmltcG9ydCBQbGF5ZXIgZnJvbSAnLi9QbGF5ZXInO1xuXG5jbGFzcyBDb21wdXRlciBleHRlbmRzIFBsYXllciB7XG4gIHByaXZhdGUgY29vcmRpbmF0ZXNBdHRhY2tlZDogc3RyaW5nW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ0VORU1ZJyk7XG4gICAgdGhpcy5jb29yZGluYXRlc0F0dGFja2VkID0gW107XG4gIH1cblxuICBnZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGVzKG1heDogbnVtYmVyID0gdGhpcy5ib2FyZC5zaXplIC0gMSkge1xuICAgIGxldCB4YXhpcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCk7XG4gICAgbGV0IHlheGlzID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbiAgICBsZXQgY29vcmRpbmF0ZXMgPSBgJHt4YXhpc30sJHt5YXhpc31gO1xuXG4gICAgd2hpbGUgKHRoaXMuY29vcmRpbmF0ZXNBdHRhY2tlZC5pbmNsdWRlcyhjb29yZGluYXRlcykpIHtcbiAgICAgIHhheGlzID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbiAgICAgIHlheGlzID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbiAgICAgIGNvb3JkaW5hdGVzID0gYCR7eGF4aXN9LCR7eWF4aXN9YDtcbiAgICB9XG5cbiAgICB0aGlzLmNvb3JkaW5hdGVzQXR0YWNrZWQucHVzaChjb29yZGluYXRlcyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBDb21wdXRlcjtcbiIsImltcG9ydCBTdGF0ZSBmcm9tICcuL1N0YXRlJztcbmltcG9ydCBEaXNwbGF5IGZyb20gJy4vRGlzcGxheSc7XG5cbmNsYXNzIEV2ZW50cyB7XG4gIHByaXZhdGUgc3RhdGU6IFN0YXRlO1xuICBwcml2YXRlIGRpc3BsYXlDb250cm9sbGVyOiBEaXNwbGF5O1xuXG4gIGNvbnN0cnVjdG9yKHN0YXRlOiBTdGF0ZSwgZGlzcGxheUNvbnRyb2xsZXI6IERpc3BsYXkpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgdGhpcy5kaXNwbGF5Q29udHJvbGxlciA9IGRpc3BsYXlDb250cm9sbGVyO1xuICB9XG5cbiAgYXR0YWNrID0gYXN5bmMgKGV2ZW50OiBNb3VzZUV2ZW50KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgaWYgKHRoaXMuaXNHYW1lT3ZlcigpIHx8IHRoaXMuaXNFbmVteVR1cm4oKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgZ3JpZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XG4gICAgY29uc3QgY29vcmRpbmF0ZSA9IHRoaXMuZ2V0Q29vcmRpbmF0ZShncmlkKTtcbiAgICBpZiAoIWNvb3JkaW5hdGUpIHJldHVybjtcblxuICAgIGNvbnN0IGVuZW15U2hpcCA9IHRoaXMuc3RhdGUucGxheWVycy5lbmVteS5ib2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGUpO1xuXG4gICAgdGhpcy5kaXNwbGF5Q29udHJvbGxlci5hdHRhY2soJ2VuZW15JywgY29vcmRpbmF0ZSwgZW5lbXlTaGlwKTtcbiAgICBncmlkLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG5cbiAgICBpZiAoZW5lbXlTaGlwPy5pc0Rlc3Ryb3llZCgpKSB7XG4gICAgICBjb25zdCBib2FyZCA9IHRoaXMuZGlzcGxheUNvbnRyb2xsZXIuZ2V0UGxheWVyQm9hcmQoJ2VuZW15Jyk7XG4gICAgICB0aGlzLmRpc3BsYXlDb250cm9sbGVyLm1hcmtEZXN0cm95ZWRTaGlwc0Nvb3JkaW5hdGVzKFxuICAgICAgICBib2FyZCxcbiAgICAgICAgZW5lbXlTaGlwLmNvb3JkaW5hdGVzLm1hcCgoY29vcmRpbmF0ZSkgPT4gY29vcmRpbmF0ZS52YWx1ZSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNFbmVteURlZmVhdGVkKCkpIHtcbiAgICAgIHRoaXMuZW5kR2FtZSgnWW91IHdpbicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbmVteVNoaXApIHJldHVybjtcblxuICAgIHRoaXMuc3dpdGNoQ3VycmVudFBsYXllcigpO1xuICAgIGF3YWl0IHRoaXMuZW5lbXlUdXJuKCk7XG4gIH07XG5cbiAgcGxhY2VTaGlwID0gKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgY29uc3QgZ3JpZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSB0aGlzLmdldENvb3JkaW5hdGVzRm9yU2hpcFBsYWNlbWVudChncmlkKTtcbiAgICBpZiAoIWNvb3JkaW5hdGVzLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgY29uc3QgcGxheWVyQm9hcmQgPSB0aGlzLnN0YXRlLnBsYXllcnMucGxheWVyLmJvYXJkO1xuICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcChjb29yZGluYXRlcyk7XG4gICAgdGhpcy5kaXNwbGF5Q29udHJvbGxlci5zaGlwKCdwbGF5ZXInLCBjb29yZGluYXRlcyk7XG4gIH07XG5cbiAgc3dpdGNoQ3VycmVudFBsYXllcigpOiB2b2lkIHtcbiAgICBjb25zdCB7IHBsYXllciwgZW5lbXkgfSA9IHRoaXMuc3RhdGUucGxheWVycztcbiAgICBjb25zdCBjdXJyZW50UGxheWVyVHlwZSA9IHRoaXMuc3RhdGUuY3VycmVudC5wbGF5ZXIudHlwZTtcblxuICAgIHRoaXMuc3RhdGUuc2V0U3RhdGUoJ2N1cnJlbnQnLCB7XG4gICAgICBwbGF5ZXI6IGN1cnJlbnRQbGF5ZXJUeXBlID09PSAnUExBWUVSJyA/IGVuZW15IDogcGxheWVyLFxuICAgICAgZW5lbXk6IGN1cnJlbnRQbGF5ZXJUeXBlID09PSAnUExBWUVSJyA/IHBsYXllciA6IGVuZW15LFxuICAgIH0pO1xuICB9XG5cbiAgYWRkSGlnaGxpZ2h0ID0gKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgaWYgKHRoaXMuYWxsU2hpcHNQbGFjZWQoKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgZ3JpZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XG4gICAgY29uc3QgZ3JpZHMgPSB0aGlzLmdldEdyaWRzRm9ySGlnaGxpZ2h0aW5nKGdyaWQpO1xuXG4gICAgaWYgKHRoaXMuZGlzcGxheUNvbnRyb2xsZXIuaXNWYWxpZFBsYWNlbWVudChncmlkcykpIHtcbiAgICAgIGdyaWRzLmZvckVhY2goKGdyaWQpID0+IGdyaWQuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0JykpO1xuICAgIH1cbiAgfTtcblxuICByZW1vdmVIaWdobGlnaHQgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICBpZiAodGhpcy5hbGxTaGlwc1BsYWNlZCgpKSByZXR1cm47XG5cbiAgICBjb25zdCBncmlkID0gZXZlbnQuY3VycmVudFRhcmdldCBhcyBIVE1MVGFibGVDZWxsRWxlbWVudDtcbiAgICBjb25zdCBncmlkcyA9IHRoaXMuZ2V0R3JpZHNGb3JIaWdobGlnaHRpbmcoZ3JpZCk7XG5cbiAgICBncmlkcy5mb3JFYWNoKChncmlkKSA9PiBncmlkLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpKTtcbiAgfTtcblxuICBwcml2YXRlIGFzeW5jIGVuZW15VHVybigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsZXQgZW5lbXlBdHRhY2tSZXN1bHQ7XG5cbiAgICBkbyB7XG4gICAgICBlbmVteUF0dGFja1Jlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZUVuZW15QXR0YWNrKCk7XG4gICAgfSB3aGlsZSAoZW5lbXlBdHRhY2tSZXN1bHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBleGVjdXRlRW5lbXlBdHRhY2soKTogUHJvbWlzZTxib29sZWFuIHwgbnVsbD4ge1xuICAgIGNvbnN0IEVORU1ZX0FUVEFDS19ERUxBWV9USU1FID0gOTAwO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVuZW15Q29vcmRpbmF0ZXMgPVxuICAgICAgICAgIHRoaXMuc3RhdGUucGxheWVycy5lbmVteS5nZW5lcmF0ZVJhbmRvbUNvb3JkaW5hdGVzKCk7XG4gICAgICAgIGNvbnN0IHBsYXllcnNTaGlwID1cbiAgICAgICAgICB0aGlzLnN0YXRlLnBsYXllcnMucGxheWVyLmJvYXJkLnJlY2VpdmVBdHRhY2soZW5lbXlDb29yZGluYXRlcyk7XG5cbiAgICAgICAgdGhpcy5kaXNwbGF5Q29udHJvbGxlci5hdHRhY2soJ3BsYXllcicsIGVuZW15Q29vcmRpbmF0ZXMsIHBsYXllcnNTaGlwKTtcblxuICAgICAgICBpZiAocGxheWVyc1NoaXA/LmlzRGVzdHJveWVkKCkpIHtcbiAgICAgICAgICBjb25zdCBib2FyZCA9IHRoaXMuZGlzcGxheUNvbnRyb2xsZXIuZ2V0UGxheWVyQm9hcmQoJ3BsYXllcicpO1xuICAgICAgICAgIHRoaXMuZGlzcGxheUNvbnRyb2xsZXIubWFya0Rlc3Ryb3llZFNoaXBzQ29vcmRpbmF0ZXMoXG4gICAgICAgICAgICBib2FyZCxcbiAgICAgICAgICAgIHBsYXllcnNTaGlwLmNvb3JkaW5hdGVzLm1hcCgoY29vcmRpbmF0ZSkgPT4gY29vcmRpbmF0ZS52YWx1ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBsYXllcnNTaGlwID09PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5zd2l0Y2hDdXJyZW50UGxheWVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wbGF5ZXJzLnBsYXllci5ib2FyZC5hbGxTaGlwc0FyZURlc3Ryb3llZCgpKSB7XG4gICAgICAgICAgdGhpcy5lbmRHYW1lKCdZb3UgbG9zZScpO1xuICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSghIXBsYXllcnNTaGlwKTtcbiAgICAgICAgfVxuICAgICAgfSwgRU5FTVlfQVRUQUNLX0RFTEFZX1RJTUUpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBlbmRHYW1lKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc3RhdGUuc2V0U3RhdGUoJ3N0YXR1cycsICdHQU1FLU9WRVInKTtcbiAgICB0aGlzLmRpc3BsYXlDb250cm9sbGVyLnNob3dHYW1lb3ZlckRpYWxvZyhtZXNzYWdlKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNHYW1lT3ZlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zdGF0dXMgPT09ICdHQU1FLU9WRVInO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0VuZW15VHVybigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXJyZW50LnBsYXllci50eXBlID09PSAnRU5FTVknO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0VuZW15RGVmZWF0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUucGxheWVycy5lbmVteS5ib2FyZC5hbGxTaGlwc0FyZURlc3Ryb3llZCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBhbGxTaGlwc1BsYWNlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5wbGF5ZXJzLnBsYXllci5ib2FyZC5hbGxTaGlwc0FyZVBsYWNlZCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb29yZGluYXRlKGdyaWQ6IEhUTUxUYWJsZUNlbGxFbGVtZW50KTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIGdyaWQuZGF0YXNldC5jb29yZGluYXRlcyB8fCBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb29yZGluYXRlc0ZvclNoaXBQbGFjZW1lbnQoZ3JpZDogSFRNTFRhYmxlQ2VsbEVsZW1lbnQpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgcGxheWVyQm9hcmQgPSB0aGlzLnN0YXRlLnBsYXllcnMucGxheWVyLmJvYXJkO1xuICAgIHJldHVybiB0aGlzLmRpc3BsYXlDb250cm9sbGVyXG4gICAgICAuZ2V0U2hpcEdyaWRzKGdyaWQsIHBsYXllckJvYXJkLnNoaXBzW3BsYXllckJvYXJkLmluZGV4T2ZVbnBsYWNlZFNoaXBdKVxuICAgICAgLm1hcCgoZ3JpZCkgPT4gZ3JpZC5kYXRhc2V0LmNvb3JkaW5hdGVzIHx8ICcnKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0R3JpZHNGb3JIaWdobGlnaHRpbmcoXG4gICAgZ3JpZDogSFRNTFRhYmxlQ2VsbEVsZW1lbnRcbiAgKTogSFRNTFRhYmxlQ2VsbEVsZW1lbnRbXSB7XG4gICAgY29uc3QgcGxheWVyID0gdGhpcy5zdGF0ZS5wbGF5ZXJzLnBsYXllcjtcbiAgICByZXR1cm4gdGhpcy5kaXNwbGF5Q29udHJvbGxlci5nZXRTaGlwR3JpZHMoXG4gICAgICBncmlkLFxuICAgICAgcGxheWVyLmJvYXJkLnNoaXBzW3BsYXllci5ib2FyZC5pbmRleE9mVW5wbGFjZWRTaGlwXVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRzO1xuIiwiaW1wb3J0IFN0YXRlIGZyb20gJy4vU3RhdGUnO1xuaW1wb3J0IERpc3BsYXkgZnJvbSAnLi9EaXNwbGF5JztcbmltcG9ydCBFdmVudHMgZnJvbSAnLi9FdmVudHMnO1xuXG5jbGFzcyBHYW1lIHtcbiAgc3RhdGU6IFN0YXRlO1xuXG4gIGNvbnRyb2xsZXJzOiB7XG4gICAgZXZlbnRzOiBFdmVudHM7XG4gICAgZGlzcGxheTogRGlzcGxheTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXRlID0gbmV3IFN0YXRlKCk7XG4gICAgY29uc3QgZGlzcGxheUNvbnRyb2xsZXIgPSBuZXcgRGlzcGxheSh0aGlzKTtcblxuICAgIHRoaXMuY29udHJvbGxlcnMgPSB7XG4gICAgICAvLyBkaXNwbGF5IGJlZm9yZSBzdGF0ZVxuICAgICAgZGlzcGxheTogZGlzcGxheUNvbnRyb2xsZXIsXG4gICAgICBldmVudHM6IG5ldyBFdmVudHModGhpcy5zdGF0ZSwgZGlzcGxheUNvbnRyb2xsZXIpLFxuICAgIH07XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIGNvbnN0IHsgcGxheWVyOiBib2FyZCB9ID0gdGhpcy5jb250cm9sbGVycy5kaXNwbGF5LmdhbWVib2FyZHMoKTtcbiAgICB0aGlzLnN0YXRlLnBsYXllcnMucGxheWVyLnBsYWNlU2hpcHMoKTtcblxuICAgIHRoaXMuc3RhdGUucGxheWVycy5wbGF5ZXIuYm9hcmQuc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgdGhpcy5jb250cm9sbGVycy5kaXNwbGF5LnNoaXAoXG4gICAgICAgICdwbGF5ZXInLFxuICAgICAgICBzaGlwLmNvb3JkaW5hdGVzLm1hcCgoY29vcmRpbmF0ZSkgPT4gY29vcmRpbmF0ZS52YWx1ZSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyc1RvR3JpZHMoXG4gICAgICBib2FyZCxcbiAgICAgICdtb3VzZWVudGVyJyxcbiAgICAgIHRoaXMuY29udHJvbGxlcnMuZXZlbnRzLmFkZEhpZ2hsaWdodFxuICAgICk7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzVG9HcmlkcyhcbiAgICAgIGJvYXJkLFxuICAgICAgJ21vdXNlbGVhdmUnLFxuICAgICAgdGhpcy5jb250cm9sbGVycy5ldmVudHMucmVtb3ZlSGlnaGxpZ2h0XG4gICAgKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnNUb0dyaWRzKFxuICAgICAgYm9hcmQsXG4gICAgICAnY2xpY2snLFxuICAgICAgdGhpcy5jb250cm9sbGVycy5ldmVudHMucGxhY2VTaGlwLmJpbmQodGhpcy5jb250cm9sbGVycy5kaXNwbGF5KSxcbiAgICAgIHtcbiAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgc3RhcnQoZW5lbXliYW9yZDogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXJzLmRpc3BsYXkuZGlzYWJsZUJ1dHRvbnMoKTtcbiAgICB0aGlzLmNvbnRyb2xsZXJzLmRpc3BsYXkuY2hhbmdlQm9hcmRPcGFjaXR5KCdwbGF5ZXInKTtcbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICB0aGlzLnN0YXRlLnBsYXllcnMucGxheWVyLmJvYXJkLnNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgIHRoaXMuY29udHJvbGxlcnMuZGlzcGxheS5zaGlwKFxuICAgICAgICAncGxheWVyJyxcbiAgICAgICAgc2hpcC5jb29yZGluYXRlcy5tYXAoKGNvb3JkaW5hdGUpID0+IGNvb3JkaW5hdGUudmFsdWUpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyc1RvR3JpZHMoXG4gICAgICBlbmVteWJhb3JkLFxuICAgICAgJ2NsaWNrJyxcbiAgICAgIHRoaXMuY29udHJvbGxlcnMuZXZlbnRzLmF0dGFjayxcbiAgICAgIHsgY2FwdHVyZTogdHJ1ZSB9XG4gICAgKTtcblxuICAgIC8vIGNvbXB1dGVyIGdlbmVyYXRlIHNoaXBzXG4gICAgdGhpcy5zdGF0ZS5wbGF5ZXJzLmVuZW15LnBsYWNlU2hpcHMoKTtcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXJzVG9HcmlkcyhcbiAgICBib2FyZDogSFRNTEVsZW1lbnQsXG4gICAgZXZlbnQ6IGtleW9mIEhUTUxFbGVtZW50RXZlbnRNYXAsXG4gICAgY2FsbGJhY2s6IGFueSxcbiAgICBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zIHwgdW5kZWZpbmVkXG4gICkge1xuICAgIGJvYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJykuZm9yRWFjaCgoZ3JpZCkgPT4ge1xuICAgICAgaWYgKGdyaWQgaW5zdGFuY2VvZiBIVE1MVGFibGVDZWxsRWxlbWVudClcbiAgICAgICAgZ3JpZC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR2FtZTtcbiIsImltcG9ydCBCb2FyZCBmcm9tICcuL0JvYXJkJztcbmltcG9ydCB7IFBsYXllcnR5cGUgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgZ2V0Q29vcmRpbmF0ZXNTdXJyb3VuZGluZ0dyaWRzIGZyb20gJy4uL3V0aWxzL2dldENvb3JkaW5hdGVzU3Vycm91bmRpbmdHcmlkcyc7XG5cbmNsYXNzIFBsYXllciB7XG4gIHB1YmxpYyBib2FyZDogQm9hcmQ7XG4gIHByaXZhdGUgX190eXBlX186IFBsYXllcnR5cGU7XG5cbiAgY29uc3RydWN0b3IodHlwZTogUGxheWVydHlwZSkge1xuICAgIHRoaXMuX190eXBlX18gPSB0eXBlO1xuICAgIHRoaXMuYm9hcmQgPSBuZXcgQm9hcmQoKTtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9fdHlwZV9fO1xuICB9XG5cbiAgcGxhY2VTaGlwcygpIHtcbiAgICB0aGlzLmJvYXJkLnNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gdGhpcy5nZW5lcmF0ZVNoaXBDb29yZGluYXRlcyhzaGlwLnNpemUpO1xuICAgICAgdGhpcy5ib2FyZC5wbGFjZVNoaXAoY29vcmRpbmF0ZXMpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2VuZXJhdGVTaGlwQ29vcmRpbmF0ZXMoc2hpcFNpemU6IG51bWJlcikge1xuICAgIGNvbnN0IHNoaXBDb29yZGluYXRlcyA9IFtdO1xuXG4gICAgLy8gQWRqdXN0IGZpbHRlcmluZyB0byBzZWxlY3QgYXBwcm9wcmlhdGUgc3RhcnRpbmcgY29vcmRpbmF0ZXNcbiAgICBjb25zdCBjb29yZGluYXRlcyA9IHRoaXMuYm9hcmQuY29vcmRpbmF0ZXMuZmlsdGVyKFxuICAgICAgKGNvb3JkaW5hdGUsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgICAgICBjb25zdCBbcG9zaXRpb25YLCBwb3NpdGlvblldID0gY29vcmRpbmF0ZS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHBvc2l0aW9uWSA8PSB0aGlzLmJvYXJkLnNpemUgLSBzaGlwU2l6ZSAmJlxuICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZVN1cHBvcnRzU2hpcFNpemUoY29vcmRpbmF0ZSwgc2hpcFNpemUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vIEVuc3VyZSB0aGVyZSBhcmUgdmFsaWQgY29vcmRpbmF0ZXMgYXZhaWxhYmxlXG4gICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgd2luZG93LmFsZXJ0KCdObyB2YWxpZCBjb29yZGluYXRlcyBhdmFpbGFibGUgZm9yIHBsYWNpbmcgdGhlIHNoaXAuJyk7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnTm8gdmFsaWQgY29vcmRpbmF0ZXMgYXZhaWxhYmxlIGZvciBwbGFjaW5nIHRoZSBzaGlwLicsXG4gICAgICAgIHRoaXMuYm9hcmQuc2hpcHNbdGhpcy5ib2FyZC5pbmRleE9mVW5wbGFjZWRTaGlwXVxuICAgICAgKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvLyBTZWxlY3QgYSByYW5kb20gc3RhcnRpbmcgY29vcmRpbmF0ZVxuICAgIGNvbnN0IGNvb3JkaW5hdGUgPVxuICAgICAgY29vcmRpbmF0ZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29vcmRpbmF0ZXMubGVuZ3RoKV07XG5cbiAgICAvLyBHZW5lcmF0ZSBjb29yZGluYXRlcyBmb3IgdGhlIGN1cnJlbnQgc2hpcFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcFNpemU7IGkrKykge1xuICAgICAgY29uc3QgW3Bvc2l0aW9uWCwgcG9zaXRpb25ZXSA9IGNvb3JkaW5hdGUuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvblkgPSBwb3NpdGlvblkgKyBpO1xuXG4gICAgICBjb25zdCBzaGlwQ29vcmRpbmF0ZSA9IGAke3Bvc2l0aW9uWH0sJHtjdXJyZW50UG9zaXRpb25ZfWA7XG4gICAgICBzaGlwQ29vcmRpbmF0ZXMucHVzaChzaGlwQ29vcmRpbmF0ZSk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHN1cnJvdW5kaW5nIGNvb3JkaW5hdGVzIGZvciB0aGUgZW50aXJlIHNoaXBcbiAgICBjb25zdCBjb29yZGluYXRlUGx1c0l0c1N1cnJvdW5kaW5nR3JpZHMgPSBbXG4gICAgICAuLi5uZXcgU2V0KFxuICAgICAgICBzaGlwQ29vcmRpbmF0ZXMuZmxhdE1hcCgoY29vcmQpID0+IFtcbiAgICAgICAgICBjb29yZCxcbiAgICAgICAgICAuLi5nZXRDb29yZGluYXRlc1N1cnJvdW5kaW5nR3JpZHMoY29vcmQpLFxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICBdO1xuXG4gICAgLy8gRmlsdGVyIG91dCB0aGUgc2hpcCdzIGNvb3JkaW5hdGVzIGFuZCB0aGVpciBzdXJyb3VuZGluZ3NcbiAgICBjb25zdCBjb29yZGluYXRlc1RoYXRFeGNsdWRlU2hpcENvb3JkaW5hdGVzQW5kVGhlaXJTdXJyb3VuZGluZyA9XG4gICAgICB0aGlzLmJvYXJkLmNvb3JkaW5hdGVzLmZpbHRlcihcbiAgICAgICAgKGJvYXJkQ29vcmRpbmF0ZSkgPT5cbiAgICAgICAgICAhY29vcmRpbmF0ZVBsdXNJdHNTdXJyb3VuZGluZ0dyaWRzLmluY2x1ZGVzKGJvYXJkQ29vcmRpbmF0ZSlcbiAgICAgICk7XG5cbiAgICB0aGlzLmJvYXJkLmNvb3JkaW5hdGVzID1cbiAgICAgIGNvb3JkaW5hdGVzVGhhdEV4Y2x1ZGVTaGlwQ29vcmRpbmF0ZXNBbmRUaGVpclN1cnJvdW5kaW5nO1xuXG4gICAgcmV0dXJuIHNoaXBDb29yZGluYXRlcztcbiAgfVxuXG4gIHByaXZhdGUgY29vcmRpbmF0ZVN1cHBvcnRzU2hpcFNpemUgPSAoXG4gICAgY29vcmRpbmF0ZTogc3RyaW5nLFxuICAgIHNoaXBTaXplOiBudW1iZXJcbiAgKSA9PiB7XG4gICAgaWYgKCFjb29yZGluYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgbmV4dFNoaXBDb29yZGluYXRlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwU2l6ZTsgaSsrKSB7XG4gICAgICBjb25zdCBbcG9zaXRpb25YLCBwb3NpdGlvblldID0gY29vcmRpbmF0ZS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xuICAgICAgY29uc3QgbmV4dFBvc2l0aW9uWSA9IHBvc2l0aW9uWSArIGk7XG4gICAgICBuZXh0U2hpcENvb3JkaW5hdGVzLnB1c2goYCR7cG9zaXRpb25YfSwke25leHRQb3NpdGlvbll9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHRTaGlwQ29vcmRpbmF0ZXMuZXZlcnkoKGNvb3JkKSA9PlxuICAgICAgdGhpcy5ib2FyZC5jb29yZGluYXRlcy5pbmNsdWRlcyhjb29yZClcbiAgICApO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xuIiwiaW1wb3J0IENvb3JkaW5hdGUgZnJvbSAnLi9Db29yZGluYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hpcCB7XG4gIHB1YmxpYyBzaXplOiBudW1iZXI7XG4gIHByaXZhdGUgX19jb29yZGluYXRlc19fOiBDb29yZGluYXRlW107XG5cbiAgY29uc3RydWN0b3Ioc2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB0aGlzLl9fY29vcmRpbmF0ZXNfXyA9IFtdO1xuICB9XG5cbiAgZ2V0IGNvb3JkaW5hdGVzKCkge1xuICAgIHJldHVybiB0aGlzLl9fY29vcmRpbmF0ZXNfXztcbiAgfVxuXG4gIHNldCBjb29yZGluYXRlcyhjb29yZGluYXRlczogQ29vcmRpbmF0ZVtdKSB7XG4gICAgY29uc3QgdmFsaWRDb29yZGluYXRlc0Zvcm1hdCA9IG5ldyBSZWdFeHAoL15bMC05XSxbMC05XSQvKTtcblxuICAgIGNvb3JkaW5hdGVzLmZvckVhY2goKGNvb3JkaW5hdGUpID0+IHtcbiAgICAgIGlmICghY29vcmRpbmF0ZS52YWx1ZS5tYXRjaCh2YWxpZENvb3JkaW5hdGVzRm9ybWF0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29vcmRpbmF0ZXMgZm9ybWF0LCBHb3Q6ICcgKyBjb29yZGluYXRlcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9fY29vcmRpbmF0ZXNfXy5sZW5ndGggPiB0aGlzLnNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBUb28gbWFueSBjb29yZGluYXRlcyBzaGlwIGlzIHNpemUgJHt0aGlzLnNpemV9IGJ1dCBnb3QgbW9yZSB0aGF0ICR7dGhpcy5zaXplfSBjb29yZGluYXRlc2BcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fX2Nvb3JkaW5hdGVzX18ucHVzaChjb29yZGluYXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzRGVzdHJveWVkKCkge1xuICAgIHJldHVybiB0aGlzLmNvb3JkaW5hdGVzLmV2ZXJ5KChjb29yZGluYXRlKSA9PiBjb29yZGluYXRlLmhpdCk7XG4gIH1cbn1cbiIsImltcG9ydCBQbGF5ZXIgZnJvbSAnLi9QbGF5ZXInO1xuaW1wb3J0IENvbXB1dGVyIGZyb20gJy4vRW5lbXknO1xuaW1wb3J0IHsgR2FtZVN0YXR1cyB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxudHlwZSBzdGF0dXMgPSAnc3RhdHVzJztcbnR5cGUgY3VycmVudCA9ICdjdXJyZW50JztcbnR5cGUga2V5cyA9IHN0YXR1cyB8IGN1cnJlbnQ7XG5cbmNsYXNzIFN0YXRlIHtcbiAgc3RhdHVzOiBHYW1lU3RhdHVzO1xuXG4gIGN1cnJlbnQ6IHtcbiAgICBwbGF5ZXI6IFBsYXllcjtcbiAgICBlbmVteTogQ29tcHV0ZXI7XG4gIH07XG5cbiAgcGxheWVyczoge1xuICAgIHBsYXllcjogUGxheWVyO1xuICAgIGVuZW15OiBDb21wdXRlcjtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXR1cyA9ICdQTEFZRVJTLVNFVFVQJztcbiAgICB0aGlzLmN1cnJlbnQgPSB7XG4gICAgICBlbmVteTogbmV3IENvbXB1dGVyKCksXG4gICAgICBwbGF5ZXI6IG5ldyBQbGF5ZXIoJ1BMQVlFUicpLFxuICAgIH07XG5cbiAgICB0aGlzLnBsYXllcnMgPSB7XG4gICAgICBlbmVteTogbmV3IENvbXB1dGVyKCksXG4gICAgICBwbGF5ZXI6IG5ldyBQbGF5ZXIoJ1BMQVlFUicpLFxuICAgIH07XG4gIH1cblxuICBzZXRTdGF0ZTxUIGV4dGVuZHMga2V5cz4oXG4gICAgcHJvcGVydHk6IFQsXG4gICAgdmFsdWU6IFQgZXh0ZW5kcyAnc3RhdHVzJyA/IEdhbWVTdGF0dXMgOiB7IHBsYXllcjogUGxheWVyOyBlbmVteTogUGxheWVyIH1cbiAgKTogdm9pZCB7XG4gICAgdGhpc1twcm9wZXJ0eV0gPSB2YWx1ZSBhcyBhbnk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFN0YXRlO1xuIiwiaW1wb3J0IEdhbWUgZnJvbSAnLi9jbGFzc2VzL0dhbWUnO1xuXG5uZXcgR2FtZSgpLmluaXRpYWxpemUoKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvb3JkaW5hdGVzU3Vycm91bmRpbmdHcmlkcyhjb29yZGlhbnRlOiBzdHJpbmcpIHtcbiAgY29uc3QgW3Bvc2l0aW9uWCwgcG9zaXRpb25ZXSA9IGNvb3JkaWFudGUuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTtcblxuICBjb25zdCB0b3AgPSBgJHtwb3NpdGlvblh9LCR7cG9zaXRpb25ZIC0gMX1gO1xuICBjb25zdCBib3R0b20gPSBgJHtwb3NpdGlvblh9LCR7cG9zaXRpb25ZICsgMX1gO1xuICBjb25zdCBsZWZ0ID0gYCR7cG9zaXRpb25YIC0gMX0sJHtwb3NpdGlvbll9YDtcbiAgY29uc3QgcmlnaHQgPSBgJHtwb3NpdGlvblggKyAxfSwke3Bvc2l0aW9uWX1gO1xuICBjb25zdCB0b3BsZWZ0ID0gYCR7cG9zaXRpb25YIC0gMX0sJHtwb3NpdGlvblkgLSAxfWA7XG4gIGNvbnN0IHRvcHJpZ2h0ID0gYCR7cG9zaXRpb25YICsgMX0sJHtwb3NpdGlvblkgLSAxfWA7XG4gIGNvbnN0IGJvdHRvbWxlZnQgPSBgJHtwb3NpdGlvblggLSAxfSwke3Bvc2l0aW9uWSArIDF9YDtcbiAgY29uc3QgYm90dG9tcmlnaHQgPSBgJHtwb3NpdGlvblggKyAxfSwke3Bvc2l0aW9uWSArIDF9YDtcblxuICByZXR1cm4gW3RvcCwgYm90dG9tLCBsZWZ0LCByaWdodCwgdG9wbGVmdCwgdG9wcmlnaHQsIGJvdHRvbWxlZnQsIGJvdHRvbXJpZ2h0XTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTE5KTtcbiJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInNpemUiLCJ0aGlzIiwiX19jb29yZGluYXRlc19fIiwiZ2VuZXJhdGVDb29yZGluYXRlcyIsIl9fc2hpcHNfXyIsInNoaXBzIiwiY29vcmRpbmF0ZXMiLCJpbmRleE9mVW5wbGFjZWRTaGlwIiwiZmluZEluZGV4Iiwic2hpcCIsImxlbmd0aCIsImFsbFNoaXBzQXJlUGxhY2VkIiwiZXZlcnkiLCJwbGFjZVNoaXAiLCJ1bmRlZmluZWQiLCJFcnJvciIsIm1hcCIsImNvb3JkaW5hdGUiLCJyZWNlaXZlQXR0YWNrIiwic2hpcEhpdCIsImZvckVhY2giLCJmaWx0ZXIiLCJ2YWx1ZSIsImhpdCIsImFsbFNoaXBzQXJlRGVzdHJveWVkIiwiaXNEZXN0cm95ZWQiLCJ4IiwieSIsInB1c2giLCJ0b1N0cmluZyIsImdhbWUiLCJnYW1lYm9hcmRzIiwicGxheWVyIiwiY29udHJvbGxlcnMiLCJkaXNwbGF5IiwiY3JlYXRlQm9hcmQiLCJzdGF0ZSIsInBsYXllcnMiLCJib2FyZCIsImVuZW15IiwiaWQiLCJib2FyZFRpdGxlIiwibWFpbiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ3cmFwcGVyIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImlubmVyVGV4dCIsInN0YXJ0QnV0dG9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhcnQiLCJyb3ciLCJncmlkIiwiY3JlYXRlR3JpZHMiLCJhcHBlbmRDaGlsZCIsImFwcGVuZCIsImJvYXJkaWQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiYWRkIiwic2hvd0dhbWVvdmVyRGlhbG9nIiwibWVzc2FnZSIsImRpYWxvZyIsInNob3dNb2RhbCIsInBhcmFncmFwaCIsInRleHRDb250ZW50Iiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJjbG9zZSIsImNoYW5nZUJvYXJkT3BhY2l0eSIsImN1cnJlbnRFbmVteSIsInBsYXllclRhYmxlIiwiZW5lbXlUYWJsZSIsInN0eWxlIiwib3BhY2l0eSIsImRpc2FibGVCdXR0b25zIiwiYnV0dG9ucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b24iLCJkaXNhYmxlZCIsImF0dGFjayIsInNldEF0dHJpYnV0ZSIsInJlbW92ZSIsImlzVmFsaWRQbGFjZW1lbnQiLCJncmlkcyIsIm1hcmtEZXN0cm95ZWRTaGlwc0Nvb3JkaW5hdGVzIiwiYm9hcmRDb29yZGluYXRlIiwicG9pbnRlckV2ZW50cyIsImNvbnRhaW5zIiwiZ2V0UGxheWVyQm9hcmQiLCJkYXRhc2V0IiwiZ2V0U2hpcEdyaWRzIiwiaSIsInhheGlzIiwieWF4aXMiLCJOdW1iZXIiLCJ0YWdOYW1lIiwib3B0aW9ucyIsInBhcmVudCIsImVsZW1lbnQiLCJDb21wdXRlciIsInN1cGVyIiwiY29vcmRpbmF0ZXNBdHRhY2tlZCIsImdlbmVyYXRlUmFuZG9tQ29vcmRpbmF0ZXMiLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJpbmNsdWRlcyIsImRpc3BsYXlDb250cm9sbGVyIiwiZXZlbnQiLCJpc0dhbWVPdmVyIiwiaXNFbmVteVR1cm4iLCJjdXJyZW50VGFyZ2V0IiwiZ2V0Q29vcmRpbmF0ZSIsImVuZW15U2hpcCIsImlzRW5lbXlEZWZlYXRlZCIsImVuZEdhbWUiLCJzd2l0Y2hDdXJyZW50UGxheWVyIiwiZW5lbXlUdXJuIiwiZ2V0Q29vcmRpbmF0ZXNGb3JTaGlwUGxhY2VtZW50IiwiYWRkSGlnaGxpZ2h0IiwiYWxsU2hpcHNQbGFjZWQiLCJnZXRHcmlkc0ZvckhpZ2hsaWdodGluZyIsInJlbW92ZUhpZ2hsaWdodCIsImN1cnJlbnRQbGF5ZXJUeXBlIiwiY3VycmVudCIsInR5cGUiLCJzZXRTdGF0ZSIsImVuZW15QXR0YWNrUmVzdWx0IiwiZXhlY3V0ZUVuZW15QXR0YWNrIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZW5lbXlDb29yZGluYXRlcyIsInBsYXllcnNTaGlwIiwic3RhdHVzIiwicGxheWVyQm9hcmQiLCJldmVudHMiLCJpbml0aWFsaXplIiwicGxhY2VTaGlwcyIsImFkZEV2ZW50TGlzdGVuZXJzVG9HcmlkcyIsImJpbmQiLCJvbmNlIiwiZW5lbXliYW9yZCIsImNhcHR1cmUiLCJjYWxsYmFjayIsIkhUTUxUYWJsZUNlbGxFbGVtZW50IiwiY29vcmRpbmF0ZVN1cHBvcnRzU2hpcFNpemUiLCJzaGlwU2l6ZSIsIm5leHRTaGlwQ29vcmRpbmF0ZXMiLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJzcGxpdCIsIm5leHRQb3NpdGlvblkiLCJjb29yZCIsIl9fdHlwZV9fIiwiZ2VuZXJhdGVTaGlwQ29vcmRpbmF0ZXMiLCJzaGlwQ29vcmRpbmF0ZXMiLCJpbmRleCIsImFycmF5IiwiYWxlcnQiLCJjb25zb2xlIiwiZXJyb3IiLCJzaGlwQ29vcmRpbmF0ZSIsImNvb3JkaW5hdGVQbHVzSXRzU3Vycm91bmRpbmdHcmlkcyIsIlNldCIsImZsYXRNYXAiLCJjb29yZGluYXRlc1RoYXRFeGNsdWRlU2hpcENvb3JkaW5hdGVzQW5kVGhlaXJTdXJyb3VuZGluZyIsInZhbGlkQ29vcmRpbmF0ZXNGb3JtYXQiLCJSZWdFeHAiLCJtYXRjaCIsInByb3BlcnR5IiwiY29vcmRpYW50ZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=